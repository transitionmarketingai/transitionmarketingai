// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  content       Content[]
  campaigns     Campaign[]
  subscriptions Subscription[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  company     String
  email       String
  phone       String?
  status      String   @default("new") // new, contacted, qualified, converted, lost
  source      String   @default("Website") // LinkedIn, Email, Website, Referral, Cold Call
  score       Int      @default(0)
  lastContact DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model Content {
  id          String    @id @default(cuid())
  title       String
  type        String    // Blog, Social, Email, Video, Resource
  status      String    @default("draft") // draft, scheduled, published, archived
  views       Int       @default(0)
  engagement  Float     @default(0)
  publishedAt DateTime?
  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  type        String    // Email, LinkedIn, Content, Webinar, Social
  status      String    @default("draft") // active, paused, completed, draft
  sent        Int       @default(0)
  opened      Int       @default(0)
  clicked     Int       @default(0)
  converted   Int       @default(0)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model Subscription {
  id                  String   @id @default(cuid())
  userId              String
  plan                String   // starter, growth, pro
  status              String   @default("pending") // pending, active, cancelled, expired
  currentPeriodStart  DateTime @default(now())
  currentPeriodEnd    DateTime
  price               Int
  currency            String   @default("INR")
  stripeCustomerId    String?
  stripeSubscriptionId String?
  razorpayPaymentId   String?
  razorpayOrderId     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
